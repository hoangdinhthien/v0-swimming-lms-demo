'use client';

import React, { useState, useEffect, useRef } from 'react';
import appSettings from '../../../app_setting.json';

interface PusherMessage {
  [key: string]: any;
}

declare global {
  interface Window {
    Pusher: any;
  }
}

export default function PusherTestPage() {
  
  const [connectionStatus, setConnectionStatus] = useState<string>('Connecting');
  const [socketId, setSocketId] = useState<string>('Connecting...');
  const [messages, setMessages] = useState<Array<{ data: PusherMessage; timestamp: string; eventType?: string }>>([]);
  const pusherRef = useRef<any>(null);
  const channelRef = useRef<any>(null);

  useEffect(() => {
    // Load Pusher script
    const script = document.createElement('script');
    script.src = 'https://js.pusher.com/8.4.0/pusher.min.js';
    script.async = true;
    script.onload = () => initializePusher();
    document.head.appendChild(script);

    return () => {
      if (pusherRef.current) {
        pusherRef.current.disconnect();
      }
      document.head.removeChild(script);
    };
  }, []);

  const initializePusher = () => {
    if (!window.Pusher) return;

    window.Pusher.logToConsole = true;

    pusherRef.current = new window.Pusher('26002bf5864a964c0f0e', {
      cluster: 'ap1',
      authorizer: function(channel: any) {
        return {
          authorize: function(socketId: string, callback: any) {
            const token = localStorage.getItem('token');
            
            fetch(`${appSettings.URL_API}/pusher/auth`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': token ? `Bearer ${token}` : ''
              },
              body: 'socket_id=' + encodeURIComponent(socketId) + '&channel_name=' + encodeURIComponent(channel.name)
            })
            .then(response => response.json())
            .then(data => {
              if (data.data?.auth || data.auth) {
                callback(null, { auth: data.data?.auth || data.auth });
              } else {
                callback(new Error('Auth failed'), null);
              }
            })
            .catch(error => callback(error, null));
          }
        };
      }
    });

    // Connection handlers
    pusherRef.current.connection.bind('connected', function () {
      const socketId = pusherRef.current.connection.socket_id;
      setSocketId(socketId);
      setConnectionStatus('Connected');
    });

    pusherRef.current.connection.bind('disconnected', function () {
      setSocketId('Not connected');
      setConnectionStatus('Disconnected');
    });

    pusherRef.current.connection.bind('connecting', function () {
      setSocketId('Connecting...');
      setConnectionStatus('Connecting');
    });

    // Subscribe to channel
    const channelName = 'private-6711e8a47b45b2974bd6133c';
    channelRef.current = pusherRef.current.subscribe(channelName);

    // Listen to all events
    channelRef.current.bind_global(function (eventName: string, data: PusherMessage) {
      const newMessage = {
        data: data,
        timestamp: new Date().toLocaleString(),
        eventType: eventName
      };
      
      setMessages(prev => [...prev, newMessage]);
    });
  };

  return (
    <div>
      <h1>Pusher Test</h1>
      
      <div>
        <h3>Connection Info</h3>
        <p>Status: {connectionStatus}</p>
        <p>Socket ID: {socketId}</p>
      </div>

      <div>
        <h3>Received Messages</h3>
        {messages.length === 0 ? (
          <p>Waiting for messages...</p>
        ) : (
          messages.map((message, index) => (
            <div key={index}>
              <p>Event: {message.eventType}</p>
              <pre>{JSON.stringify(message.data, null, 2)}</pre>
              <p>Time: {message.timestamp}</p>
              <hr />
            </div>
          ))
        )}
      </div>
    </div>
  );
}