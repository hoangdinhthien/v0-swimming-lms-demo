NOTES
======

schedule (system tự xếp), max 11 slot (7h-6h45) => filter theo date, end time + end minute = thời gian end slot

get info -> me

2 lịch -> lịch chung \\ lịch instructors riêng

/public/users => student/instructor

VIET HAM TRUY CAP ARRAY HAI CHIEU
 
news: type => lọc role

lọc theo tenant id

{
  "title": "Innovative AI Course",
  "description": "A comprehensive course exploring modern AI applications in real-world scenarios.",
  "details": [
    {
      "title": "Module 1: AI Fundamentals"
    },
    {
      "title": "Module 2: Machine Learning in Practice"
    }
  ],
  "category": [],
  "price": 199.99,
  "session_number": 5,
  "session_number_duration": "2 hours per session",
  "is_active": true,
  "media": "https://example.com/media/ai-course.jpg"
}

===========================

show message title; ko co => show ten user theo array

====================

List student Theo tenant, dua vao bang user tenant maping

Create user Add
 user tạo tài khoản vào chi nhánh , bằng cách create user trong bảng user (role_front member), sau đó mapping vào user tenant mapping

lúc add số điện thoại hoặc email thì cũng phải search user đó đã tồn tịa trong hệ thống chưa, nếu rồi thì chỉ add vào tenant mapping thôi

Doi tenant len headerc => dropdown [done]

khoá học thì chỉ được add các instuctor đã được add vào tenant, dựa vào bảng user tenant mapping

Chinh sua khoa học

Add form tạo order 

Them mục lop hoc

add member to class 

muc xep lich nhanh cho lop -> chon lop \ show slot trong tinh tu hien tai 

courses page: them cot waiting list (don da thanh toan dang cho dc xep lop), click => qua trang xep lop/tao lop (status: paid)

push noti => only mess

xóa breadcrump 

bỏ cột chuyên môn (instructor page)

====================================

calendar view -> them 3 chấm neu ds lop hien len trong o do qua dai // done

xoa tao tac nhanh ben trang detail transaction // done

hien them thong tin trong table /dashboard/manager/classes page // done

them grid ngay hien tai trong calendar // done

chon lop hoc -> hien ten lop hoc thoi // done 

// total mac dinh 12 CUA COURSE
sessions_exceeded -> buoi hoc vuot qua  total mac dinh cua course 
sessions_remaining -> buoi con thieu
 "total_schedules" -> tong buoi hoc hien tai
"schedule_passed" -> buoi hoc DA HOC 
=====> dones

bo hoc phi -> class detail  | auto mo ra So giang vien vs so hoc vien chinh sua thang tren UI // done

dashboard/manager/classes/create -> them tinh nang search user (students da thanh toan cho khoa hoc do) khi tao lop // done

them thanh search ho boi trong trang them lop hoc // done

=============================

sua thong tin Lớp Học và Hồ Bơi -> theo list don gian // THANG TREN CAC FIELD, KHOI CAN MODAL EDIT // done

sua UI transactions detail sau khi da add member vao lop hoc // pending

bo icon trong trang, hien tai dang co qua nhieu icon -> kho nhin // pending

//api 
sau khi thanh toan -> add member vao lop hoc, lop hoc do phai chua dc xep lop

api: detail user (lop hoc da qua, dang hoc, chua hoc)attending, attended, upcoming
// update lai order sau khi add user vào lớp ==> pending

show ten instructor trong modal Chọn lớp học trong transaction detail => pending

check data order co field class => ko add student vao class nua

application (đơn từ): thao tác giống trên fap

==================================

trong order detail: chon lop hoc modal: lam them giao dien tao lop hoc 

class detail và trang create new class khi them member chuyen sang su dung add-member, remove-member khi làm gì thao tác với member trong class

===================================

MANAGER & STAFF
- staff (staff có bao nhiêu role?) -> mỗi account 1 quyền riêng để quản lý do manager sắp xếp (lưu ý FE: khi staff login thì phải check là role của staff hay manager để show lên UI các chức năng tương ứng)
- manager làm hết phần management trong 1 chi nhánh (xem hết thông số này kia || thêm UI 1 tab để quản lý staff)
- TH1 luồng duyệt: staff sửa cái j xong thì manager sẽ check và apply
- thêm tính năng cho manager & staff: tính năng edit/tạo landing page => kéo thả, chỉnh đc UI
mcp
- sẽ có trường hợp staff chưa đc phân quyền -> login vào page manager sẽ ko show/xem đc j hết 

MANAGER SEND NOTI CHO USER -> SỬ DỤNG PUSHER

===================================

student detail: process: từ 0 -> 1 (vd: 0.5 là học được 50% số buổi của lớp học đó) 

===================================

application get: type: member/instructor => filter list applications theo member/instructor
application reply status: accept, 

===================================

sửa lại phần loading của hệ thống

===================================

tạo thêm page để quản lý staff (chat history: adding fade in affect new page)

===================================
Thứ tự công việc cần làm:

Warning:

Thêm ngày bắt đầu học + thời điểm kết thúc khi tạo course (dựa theo thông tin class chứ không phải course)
- Lịch cố định: ko thanh toán cho khoá học mà thanh toán cho lớp học.
=> Giữ như luồng cũ

- Lịch custom: thanh toán theo khoa học. -> triển khai thêm một kiểu lớp học theo tháng
=> Bổ sung thêm field type (origin|monthly) => chủ yếu để filter
=> Bổ sung field is_monthly: boolean cho bảng classroom => sẽ là tính tiền khóa học theo tháng
=> Mobile fe sẽ có ui hiện những khóa học cần đóng trong tháng => sau khi đóng manager/staff => kiểm tra

(LÀM UI LỊCH SAO CHO THUẬN TIỆN)

***Việc học bơi người ta thường học theo kiểu là tập thể dục thể thao, học lấy tín chỉ, học luyện tập đề thi.
Học theo một khóa nhất định (có start-> end)
=> Phát sinh có nhu cầu học như, đặt lịch học riêng, đợi được xếp lớp ( có hai kiểu bên trong là đăng ký rồi thì đợi trung tâm liên hệ sắp xếp)
Học hàng tháng (tập thể dục thể thao)
=> Thì trung tâm sẽ mở sẵn các khóa và lớp học được lên lịch sẵn => user đóng tiền và được xếp lớp

***=> điểm chung của hai cái này là Trung tâm chủ động xếp (còn cái việc có course có lớp sẵn hay không để người ta chọn là do trung tâm vô manager làm)

Phase 1:
Lên phương án cho tính năng xếp lịch, chỉnh Ul edit lịch học, tính thêm business rule cho các trường hợp đổi lịch học (Hoàng Fe)
Phân quyền staff theo tính năng do manager quản lý (Hoàng fe)
Sửa lại phần lịch học trên mobile (api đã có data) (bào)
Mục chat giờ sẽ là chỗ theo dõi thông tin học cũng như chat (bào)

==========================================================

ok, now we will begin to do the stuffs for the staff functions and UI

MANAGER:
- when the manager create a new staff, that staff can login into the manager system

- this get method api is for the manager to get the list of all the permissions (modules) that the manager can choose to give which permission (module) for the staffs can use (and see in the UI). NOTE: the staffs can still login into the system even if the manager haven't give them any permission (modules) to use/access.
  https://n4romoz0b1.execute-api.ap-southeast-1.amazonaws.com/dev/api/v1/workflow-process/manager/staff-permission/list 
  
  here is the response data: 
      { 
        "data": [
            [
                [
                    {
                        "module": [
                            "Course"
                        ],
                        "action": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE"
                        ],
                        "haveReview": true
                    },
                    {
                        "module": [
                            "Order"
                        ],
                        "action": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE"
                        ],
                        "haveReview": true
                    },
                    {
                        "module": [
                            "Class"
                        ],
                        "action": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE"
                        ],
                        "haveReview": true
                    },
                    {
                        "module": [
                            "User"
                        ],
                        "action": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE"
                        ],
                        "haveReview": true
                    },
                    {
                        "module": [
                            "News"
                        ],
                        "action": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE"
                        ],
                        "haveReview": true
                    },
                    {
                        "module": [
                            "Blog"
                        ],
                        "action": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE"
                        ],
                        "haveReview": true
                    },
                    {
                        "module": [
                            "Application"
                        ],
                        "action": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE"
                        ],
                        "haveReview": true
                    }
                ]
            ]
        ],
        "message": "Success",
        "statusCode": 200
      }

- like i mentioned, the manager can allow/give access which functions (modules) for the staff too use (GET, POST, PUT, DELETE), for example after the manager created a new staff name staff5, after that the manager give GET and POST and noReview:true permission for staff5, staff5 can access the 'Lớp Học' tab on the UI (user module), which means that staff5 see the list of classes (and the class details) and staff5 can create a new class, and for the noReview: true means that staff5 create a new class directly without the manager approval
  here is the put method for the manager to Edit a staff's list of permission:
      https://n4romoz0b1.execute-api.ap-southeast-1.amazonaws.com/dev/api/v1/workflow-process/manager/staff-permission?user=68e12cd44b476e8659a11b52
  
  and here is the example request body:
      {
    "permission": [
        // course
        {
            "module": [
                "Class"
            ],
            "action": [
                "GET",
                "POST",
                "PUT",
                "DELETE"
            ],
            "noReview": true
        },
        // order
        {
            "module": [
                "Order"
            ],
            "action": [
                "GET",
                "PUT"
            ],
            "noReview": true
        },
          {
            "module": [
                "Course"
            ],
            "action": [
                "GET",
                "PUT",
                "POST"
            ],
            "noReview": true
        }
    ]
}

NOW FOR THE STAFF PART :
- after the manager have created the staff account and give the permission modules for the staff, or have not the staff the permissions, the staff can login into the system

- like i already mentioned all the UIs of the staff will be the same with the manager UIs. we will begin to do the get method first.

- the staff have this get method api to get the services from the manager:
    https://n4romoz0b1.execute-api.ap-southeast-1.amazonaws.com/dev/api/v1/workflow-process/staff
- to use this api, beside of passing the x-tenant-id and token to the header, you will need to pass the module from the get staff permissions api to the header to get. 
- For example, when you use the fetchStaffPermissions to get the permissions: 
 {
    "data": [
        [
            [
                {
                    "_id": "68e1319dcda336aa1ba8a673",
                    "user": "68e12e6d7aaffa220aca8835",
                    "permission": [
                        {
                            "module": [
                                "Class"
                            ],
                            "action": [
                                "GET",
                                "POST",
                                "PUT",
                                "DELETE"
                            ],
                            "noReview": true
                        },
                        {
                            "module": [
                                "Order"
                            ],
                            "action": [
                                "GET",
                                "PUT"
                            ],
                            "noReview": true
                        },
                        {
                            "module": [
                                "Course"
                            ],
                            "action": [
                                "GET",
                                "PUT",
                                "POST"
                            ],
                            "noReview": true
                        }
                    ],
                    "created_at": "2025-10-04T21:39:25.000Z",
                    "created_by": "6711e8a47b45b2974bd6133c",
                    "updated_at": "2025-10-11T17:49:07.000Z",
                    "updated_by": "6831d35a95ac46cc9b686001",
                    "tenant_id": "67cabc98c87dc080914265d4"
                }
            ]
        ]
    ],
    "message": "Success",
    "statusCode": 200
}
- from the response data of fetchStaffPermissions, you see the "module":["Class"], the Class is the service that you will pass to the header for this api: https://n4romoz0b1.execute-api.ap-southeast-1.amazonaws.com/dev/api/v1/workflow-process/staff

- i noticed that in the dashboard-layout-v2 have the admin part that we didn't use. i think you can reuse it for the staff sidebar but also note that you have to use this api to check which modules does that staff have the permission to access from the manager. Ok?

    https://n4romoz0b1.execute-api.ap-southeast-1.amazonaws.com/dev/api/v1/workflow-process/staff/permission

    here is the response data:
    {
    "data": [
        [
            [
                {
                    "_id": "68e1319dcda336aa1ba8a673",
                    "user": "68e12e6d7aaffa220aca8835",
                    "permission": [
                        {
                            "module": [
                                "Class"
                            ],
                            "action": [
                                "GET",
                                "POST",
                                "PUT",
                                "DELETE"
                            ],
                            "noReview": true
                        },
                        {
                            "module": [
                                "Order"
                            ],
                            "action": [
                                "GET",
                                "PUT"
                            ],
                            "noReview": true
                        },
                        {
                            "module": [
                                "Course"
                            ],
                            "action": [
                                "GET",
                                "PUT",
                                "POST"
                            ],
                            "noReview": true
                        }
                    ],
                    "created_at": "2025-10-04T21:39:25.000Z",
                    "created_by": "6711e8a47b45b2974bd6133c",
                    "updated_at": "2025-10-11T17:49:07.000Z",
                    "updated_by": "6831d35a95ac46cc9b686001",
                    "tenant_id": "67cabc98c87dc080914265d4"
                }
            ]
        ]
    ],
    "message": "Success",
    "statusCode": 200
}

về staff api, tôi thấy là bạn đã có fetchStaffData trong file staff-data-api.ts rồi. để tôi giải thích lại về api này. api này sẽ get services từ manager, nghĩa là khi manager cấp quyền gì đó cho staff thì khi staff login vào hệ thống thì staff chỉ được thấy và sử dụng những cái mà manager đã cho phép họ sử dụng. ví dụ: manager give permission module User cho staff thì trên UI staff có thể xem được Học Viên, Giáo Viên, Nhân Viên (students, instructors, staffa), và tương tự như vậy nếu ta thay đổi phần value của phần 'service' trong header của api này từ User thành Class thì ta sẽ get data danh sách lớp học và tương tự như vậy cho các module còn lại nếu như staff được manager cấp quyền sử dụng chúng.

- nhưng ta đang có 1 vấn đề lớn ở đây rằng là khi get để lấy data của các service khác nhau, thì phần data structure của mỗi service là khác nhau (sẽ có service có data structure giống nhau nhưng phần lớn là không)

- và việc mà khi ta sử dụng 1 api này để get data cho các service mà có structure data khác nhau như vậy thì 

- tôi có thấy là bạn có phần fetchStaffCourses để fetch course dâta for staff, và tương tự như vậy cho các service còn lại rồi 

CÂU HỎI CỦA TÔI Ở ĐÂY LÀ TA CÓ NÊN DUPLICATE  fetchStaffData THÀNH TỪNG API CỤ THỂ ĐỂ GET DATA THEO ĐÚNG STRUCTURE DATA KHÔNG ? 

HAY CÓ 1 CÁCH TỐI ƯU HƠN NÀO ĐÓ MÀ TA CÓ THỂ CHỈ CẦN DÙNG fetchStaffData MÀ KHÔNG CẦN QUAN TÂM RẰNG DATA STRUCTURE KHI RESPONSE RA NHƯ THẾ NÀO NHỮNG VẪN CÓ THỂ LÀM ĐƯỢC TỰ ĐỘNG CHECK VÀ SHOW LIÊN UI MỖI KHI MÀ BÊN BACKEND CÓ THÊM 1 FIELD NÀO ĐÓ MỚI HOẶC SỬA DATA STRUCTURE MÀ FRONTEND KHÔNG CẦN PHẢI SỬA LẠI CODE KHÔNG? GIỐNG NHIỂU ĐỌC XEM JSON TRẢ RA NHỮNG GÌ RỒI TỪ ĐÓ HIỆN LÊN UI, NHƯ VẬY CÓ ỔN VÀ AN TOÀN KHÔNG?

